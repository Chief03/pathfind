'use client'

import { useState, useEffect } from 'react'
import { generateClient } from 'aws-amplify/data'
import type { Schema } from '../../amplify/data/resource'
import { parseFlightNumber, lookupFlight } from '../lib/flightLookup'
import { getEventSuggestions, eventCategories, EventSuggestion } from '../lib/eventSuggestions'
import { fetchUserAttributes } from 'aws-amplify/auth'

interface TripDashboardProps {
  tripData: any
}

export default function TripDashboard({ tripData }: TripDashboardProps) {
  const [activeTab, setActiveTab] = useState('overview')
  const [flights, setFlights] = useState<any[]>([])
  const [itinerary, setItinerary] = useState<any[]>([])
  const [places, setPlaces] = useState<any[]>([])
  const [showQuickActions, setShowQuickActions] = useState(false)
  const [editingField, setEditingField] = useState<string | null>(null)
  const [editValues, setEditValues] = useState({
    destinationCity: tripData?.destinationCity || '',
    groupSize: tripData?.groupSize || 2,
    startDate: tripData?.startDate || '',
    endDate: tripData?.endDate || ''
  })
  const [showAddFlight, setShowAddFlight] = useState(false)
  const [savingFlight, setSavingFlight] = useState(false)
  const [userNickname, setUserNickname] = useState<string>('')
  const [tripParticipants, setTripParticipants] = useState<any[]>([])
  const [expandedFlight, setExpandedFlight] = useState<string | null>(null)
  const [editingFlightId, setEditingFlightId] = useState<string | null>(null)
  const [showAddEvent, setShowAddEvent] = useState(false)
  const [selectedCategory, setSelectedCategory] = useState('all')
  const [eventSuggestions, setEventSuggestions] = useState<EventSuggestion[]>([])
  const [customEvent, setCustomEvent] = useState({
    title: '',
    description: '',
    location: '',
    date: '',
    time: '',
    cost: '',
    duration: '',
    category: 'activity'
  })
  const [budgets, setBudgets] = useState<any[]>([])
  const [showAddBudgetCategory, setShowAddBudgetCategory] = useState(false)
  const [newCategoryName, setNewCategoryName] = useState('')
  const [editingBudget, setEditingBudget] = useState<string | null>(null)
  const [editingAmount, setEditingAmount] = useState('')
  const [editingMode, setEditingMode] = useState<'pot' | 'per_person'>('pot')
  const [globalBudgetMode, setGlobalBudgetMode] = useState<'pot' | 'per_person'>('pot')
  const [budgetsInitialized, setBudgetsInitialized] = useState(false)
  const [budgetLoadAttempted, setBudgetLoadAttempted] = useState(false)
  const [newFlight, setNewFlight] = useState({
    arrivalAirport: '',
    arrivalTime: '',
    departureAirport: '',
    departureTime: '',
    airline: '',
    flightNumber: '',
    direction: 'arrival' as 'arrival' | 'departure',
    forWho: 'myself'
  })

  useEffect(() => {
    if (tripData?.id) {
      loadTripData()
    }
    // Update edit values when tripData changes
    setEditValues({
      destinationCity: tripData?.destinationCity || '',
      groupSize: tripData?.groupSize || 2,
      startDate: tripData?.startDate || '',
      endDate: tripData?.endDate || ''
    })
    // Fetch user's nickname from Cognito
    fetchUserNickname()
    
    // Load event suggestions for destination
    if (tripData?.destinationCity) {
      const suggestions = getEventSuggestions(tripData.destinationCity)
      setEventSuggestions(suggestions)
    }
    
    // Load budgets
    loadBudgets()
  }, [tripData])

  const fetchUserNickname = async () => {
    try {
      const attributes = await fetchUserAttributes()
      const nickname = attributes.nickname || attributes.given_name || attributes.email?.split('@')[0] || 'Me'
      setUserNickname(nickname)
    } catch (error) {
      console.error('Error fetching user attributes:', error)
      setUserNickname('Me')
    }
  }

  const loadTripData = async () => {
    try {
      const client = generateClient<Schema>()
      
      // Load flights
      const { data: flightData } = await client.models.Flight.list({
        filter: { tripId: { eq: tripData.id } }
      })
      setFlights(flightData || [])

      // Load itinerary items
      const { data: itineraryData } = await client.models.ItineraryItem.list({
        filter: { tripId: { eq: tripData.id } }
      })
      setItinerary(itineraryData || [])

      // Load places
      const { data: placesData } = await client.models.Place.list({
        filter: { tripId: { eq: tripData.id } }
      })
      setPlaces(placesData || [])

      // Load trip participants (for now, mock data - will be real when participants are added)
      // In production, this would fetch from TripParticipant model
      const mockParticipants = [
        { id: '1', name: userNickname || 'Me', isCurrentUser: true },
        // Add mock participants for demo - these would come from database
        { id: '2', name: 'Sarah', isCurrentUser: false },
        { id: '3', name: 'John', isCurrentUser: false },
        { id: '4', name: 'Mike', isCurrentUser: false }
      ]
      setTripParticipants(mockParticipants)
    } catch (error) {
      console.error('Error loading trip data:', error)
    }
  }

  const saveField = async (field: string) => {
    try {
      const client = generateClient<Schema>()
      
      const updateData: any = {}
      updateData[field] = editValues[field as keyof typeof editValues]
      
      await client.models.Trip.update({
        id: tripData.id,
        ...updateData
      })
      
      // Update the local tripData (in a real app, this would trigger a refetch)
      Object.assign(tripData, updateData)
      setEditingField(null)
    } catch (error) {
      console.error('Error updating trip:', error)
    }
  }

  const cancelEdit = () => {
    // Reset to original values
    setEditValues({
      destinationCity: tripData?.destinationCity || '',
      groupSize: tripData?.groupSize || 2,
      startDate: tripData?.startDate || '',
      endDate: tripData?.endDate || ''
    })
    setEditingField(null)
  }

  const saveFlight = async () => {
    // Validation
    if (!newFlight.arrivalAirport || !newFlight.arrivalTime) {
      alert('Please fill in the required fields: Arrival location and time')
      return
    }

    console.log('Saving flight with data:', newFlight)
    setSavingFlight(true)
    
    try {
      const client = generateClient<Schema>()
      
      // Use user's nickname when "myself" is selected
      const flightOwner = newFlight.forWho === 'myself' ? userNickname : newFlight.forWho
      
      // Format the datetime properly for AWS
      const formatDateTime = (dateTime: string) => {
        if (!dateTime) return new Date().toISOString()
        // If it's already in ISO format, return it
        if (dateTime.includes('Z') || dateTime.includes('+')) return dateTime
        // Otherwise, convert local datetime-local format to ISO
        return new Date(dateTime).toISOString()
      }
      
      // Prepare flight data
      const flightData = {
        tripId: tripData.id,
        arrivalAirport: JSON.stringify({ name: newFlight.arrivalAirport }),
        arrivalTime: formatDateTime(newFlight.arrivalTime),
        departureAirport: JSON.stringify({ name: newFlight.departureAirport || 'TBD' }),
        departureTime: formatDateTime(newFlight.departureTime || newFlight.arrivalTime),
        airline: newFlight.airline || 'TBD',
        flightNumber: newFlight.flightNumber || 'TBD',
        direction: newFlight.direction as 'arrival' | 'departure',
        addedByUserName: flightOwner
      }
      
      console.log(editingFlightId ? 'Updating flight data:' : 'Creating flight data:', flightData)
      
      // Create or update flight based on editing mode
      const { data: flight, errors } = editingFlightId 
        ? await client.models.Flight.update({ id: editingFlightId, ...flightData })
        : await client.models.Flight.create(flightData)
      
      if (errors) {
        console.error('GraphQL errors:', errors)
        alert('Error saving flight. Please check the console for details.')
        setSavingFlight(false)
        return
      }
      
      if (flight) {
        console.log(editingFlightId ? 'Flight updated successfully:' : 'Flight saved successfully:', flight)
        
        // Update flights list
        if (editingFlightId) {
          // Update existing flight in the list
          setFlights(flights.map(f => f.id === editingFlightId ? flight : f))
        } else {
          // Add new flight to the list
          setFlights([...flights, flight])
        }
        
        // Reset form
        setNewFlight({
          arrivalAirport: '',
          arrivalTime: '',
          departureAirport: '',
          departureTime: '',
          airline: '',
          flightNumber: '',
          direction: 'arrival',
          forWho: 'myself'
        })
        setShowAddFlight(false)
        setSavingFlight(false)
        setEditingFlightId(null)
      }
    } catch (error) {
      console.error('Error adding flight:', error)
      alert(`Error saving flight: ${error instanceof Error ? error.message : 'Unknown error'}`)
      setSavingFlight(false)
    }
  }

  const handleEditFlight = (flight: any) => {
    // Parse the stored JSON data
    const arrivalAirport = JSON.parse(flight.arrivalAirport).name
    const departureAirport = JSON.parse(flight.departureAirport).name
    
    // Populate form with flight data
    setNewFlight({
      arrivalAirport: arrivalAirport !== 'TBD' ? arrivalAirport : '',
      arrivalTime: flight.arrivalTime ? flight.arrivalTime.split('.')[0] : '', // Remove milliseconds for datetime-local input
      departureAirport: departureAirport !== 'TBD' ? departureAirport : '',
      departureTime: flight.departureTime ? flight.departureTime.split('.')[0] : '',
      airline: flight.airline !== 'TBD' ? flight.airline : '',
      flightNumber: flight.flightNumber !== 'TBD' ? flight.flightNumber : '',
      direction: flight.direction,
      forWho: flight.addedByUserName === userNickname ? 'myself' : flight.addedByUserName || 'everyone'
    })
    
    // Set editing mode and show form
    setEditingFlightId(flight.id)
    setShowAddFlight(true)
    setExpandedFlight(null)
  }

  const addEventToItinerary = async (event: EventSuggestion | typeof customEvent, isCustom = false) => {
    try {
      const client = generateClient<Schema>()
      
      // Map to ItineraryItem schema
      const itineraryItemData = {
        tripId: tripData.id,
        title: event.title,
        location: event.location || (isCustom ? customEvent.location : 'TBD'),
        date: isCustom ? customEvent.date : tripData.startDate, // Default to trip start date for suggestions
        time: isCustom ? customEvent.time : '12:00',
        price: typeof event.price === 'number' ? event.price : 
               event.price === 'free' ? 0 : 
               (isCustom ? parseFloat(customEvent.cost) || 0 : 0),
        description: event.description || '',
        category: event.category === 'activity' ? 'Activity' :
                 event.category === 'restaurant' ? 'Restaurant' :
                 event.category === 'attraction' ? 'Other' :
                 event.category === 'concert' ? 'Event' :
                 event.category === 'nightlife' ? 'Event' :
                 event.category === 'outdoor' ? 'Activity' :
                 event.category === 'cultural' ? 'Event' : 'Other',
        addedBy: userNickname,
        eventUrl: 'bookingUrl' in event ? event.bookingUrl : undefined
      }
      
      const { data: newEvent, errors } = await client.models.ItineraryItem.create(itineraryItemData)
      
      if (errors) {
        console.error('GraphQL errors:', errors)
        alert('Error adding event. Please try again.')
        return
      }
      
      if (newEvent) {
        setItinerary([...itinerary, newEvent])
        
        if (isCustom) {
          // Reset custom event form
          setCustomEvent({
            title: '',
            description: '',
            location: '',
            date: '',
            time: '',
            cost: '',
            duration: '',
            category: 'activity'
          })
          setShowAddEvent(false)
        }
        
        alert(`"${event.title}" added to your itinerary!`)
      }
    } catch (error) {
      console.error('Error adding event:', error)
      alert('Error adding event. Please try again.')
    }
  }

  const filteredSuggestions = selectedCategory === 'all' 
    ? eventSuggestions 
    : eventSuggestions.filter(suggestion => suggestion.category === selectedCategory)

  // Budget management functions
  const loadBudgets = async () => {
    try {
      const client = generateClient<Schema>()
      const { data: budgetData } = await client.models.Budget.list({
        filter: { tripId: { eq: tripData.id } }
      })
      
      if (budgetData && budgetData.length > 0) {
        setBudgets(budgetData)
        setBudgetsInitialized(true)
      } else {
        // Initialize default categories if no budgets exist
        await initializeDefaultBudgets()
      }
    } catch (error) {
      console.error('Error loading budgets:', error)
    }
  }

  const initializeDefaultBudgets = async () => {
    const defaultCategories = [
      'accommodation',
      'food',
      'flights',
      'activities',
      'transportation'
    ]
    
    try {
      const client = generateClient<Schema>()
      const budgetPromises = defaultCategories.map(cat => 
        client.models.Budget.create({
          tripId: tripData.id,
          category: cat,
          budgetMode: 'pot',
          totalAmount: 0,
          perPersonAmount: 0,
          isCustomCategory: false,
          lastUpdatedBy: userNickname || 'System',
          lastUpdatedAt: new Date().toISOString()
        })
      )
      
      const results = await Promise.all(budgetPromises)
      const newBudgets = results.map(result => result.data).filter(Boolean)
      setBudgets(newBudgets)
      setBudgetsInitialized(true)
    } catch (error) {
      console.error('Error initializing budgets:', error)
    }
  }

  const updateBudgetAmount = async (budgetId: string, amount: number, mode: 'pot' | 'per_person') => {
    try {
      const client = generateClient<Schema>()
      
      // Calculate both total and per-person amounts based on the mode
      const groupSize = tripData?.groupSize || 1
      let totalAmount, perPersonAmount
      
      if (mode === 'pot') {
        totalAmount = amount
        perPersonAmount = amount / groupSize
      } else {
        perPersonAmount = amount
        totalAmount = amount * groupSize
      }
      
      const { data: updatedBudget } = await client.models.Budget.update({
        id: budgetId,
        budgetMode: mode,
        totalAmount: totalAmount,
        perPersonAmount: perPersonAmount,
        lastUpdatedBy: userNickname,
        lastUpdatedAt: new Date().toISOString()
      })
      
      if (updatedBudget) {
        setBudgets(budgets.map(budget => 
          budget.id === budgetId ? updatedBudget : budget
        ))
      }
    } catch (error) {
      console.error('Error updating budget:', error)
      alert('Failed to update budget. Please try again.')
    }
  }

  const addCustomBudgetCategory = async () => {
    if (!newCategoryName.trim()) return
    
    try {
      const client = generateClient<Schema>()
      const { data: newBudget } = await client.models.Budget.create({
        tripId: tripData.id,
        category: newCategoryName.trim().toLowerCase(),
        budgetMode: globalBudgetMode,
        totalAmount: 0,
        perPersonAmount: 0,
        isCustomCategory: true,
        lastUpdatedBy: userNickname,
        lastUpdatedAt: new Date().toISOString()
      })
      
      if (newBudget) {
        setBudgets([...budgets, newBudget])
        setNewCategoryName('')
        setShowAddBudgetCategory(false)
      }
    } catch (error) {
      console.error('Error adding custom budget category:', error)
      alert('Failed to add category. Please try again.')
    }
  }

  const deleteBudgetCategory = async (budgetId: string) => {
    if (!confirm('Are you sure you want to delete this budget category?')) return
    
    try {
      const client = generateClient<Schema>()
      await client.models.Budget.delete({ id: budgetId })
      setBudgets(budgets.filter(budget => budget.id !== budgetId))
    } catch (error) {
      console.error('Error deleting budget category:', error)
      alert('Failed to delete category. Please try again.')
    }
  }

  const getBudgetIcon = (category: string) => {
    const icons: { [key: string]: string } = {
      accommodation: '🏨',
      food: '🍽️', 
      flights: '✈️',
      activities: '🎯',
      transportation: '🚗',
      shopping: '🛍️',
      entertainment: '🎉',
      nightlife: '🍹',
      tips: '💵',
      other: '💳'
    }
    return icons[category] || '💰'
  }

  const totalBudget = budgets.reduce((sum, budget) => sum + budget.totalAmount, 0)
  const totalPerPerson = budgets.reduce((sum, budget) => sum + budget.perPersonAmount, 0)

  const handleFlightNumberLookup = async (flightNum: string) => {
    // Parse the flight number to detect airline
    const parsed = parseFlightNumber(flightNum)
    if (parsed) {
      // Set the airline immediately
      setNewFlight(prev => ({
        ...prev,
        airline: parsed.airline,
        flightNumber: parsed.number
      }))

      // Look up flight details (mock for now, can be replaced with real API)
      const flightDate = newFlight.arrivalTime ? newFlight.arrivalTime.split('T')[0] : new Date().toISOString().split('T')[0]
      const flightInfo = await lookupFlight(parsed.number, flightDate)
      
      if (flightInfo) {
        // Auto-fill available information
        setNewFlight(prev => ({
          ...prev,
          airline: flightInfo.airline,
          flightNumber: flightInfo.flightNumber,
          departureAirport: flightInfo.departureAirport || prev.departureAirport,
          arrivalAirport: flightInfo.arrivalAirport || prev.arrivalAirport,
          // Note: Times would need date conversion in real implementation
          departureTime: prev.departureTime || '',
          arrivalTime: prev.arrivalTime || ''
        }))
      }
    }
  }

  const tabs = [
    { id: 'overview', label: 'Overview', icon: '🏠' },
    { id: 'flights', label: 'Flights', icon: '✈️' },
    { id: 'itinerary', label: 'Itinerary', icon: '📅' },
    { id: 'places', label: 'Places', icon: '📍' },
    { id: 'budget', label: 'Budget', icon: '💰' },
  ]

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      {/* Trip Header */}
      <div className="bg-white rounded-xl shadow-md p-6 mb-8">
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              {tripData?.name || 'Your Trip'}
            </h1>
            <p className="text-gray-600 mt-2">
              {tripData?.destinationCity} • {tripData?.startDate} to {tripData?.endDate}
            </p>
          </div>
          <div className="text-right">
            <p className="text-sm text-gray-500 mb-2">Share Code</p>
            <p className="text-2xl font-mono font-bold text-[#FF5A5F]">
              {tripData?.shareCode}
            </p>
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="bg-white rounded-xl shadow-md mb-8">
        <div className="flex overflow-x-auto">
          {tabs.map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex-1 min-w-[120px] px-4 py-4 text-center border-b-2 transition-colors ${
                activeTab === tab.id
                  ? 'border-[#FF5A5F] text-[#FF5A5F] bg-red-50'
                  : 'border-transparent text-gray-600 hover:text-gray-900'
              }`}
            >
              <span className="text-2xl mb-1 block">{tab.icon}</span>
              <span className="text-sm font-medium">{tab.label}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Tab Content */}
      <div className="bg-white rounded-xl shadow-md p-6">
        {activeTab === 'overview' && (
          <div>
            <h2 className="text-2xl font-bold mb-6">Trip Overview</h2>
            
            {/* Trip Summary Cards */}
            <div className="grid grid-cols-2 gap-4 mb-8">
              {/* Destination Card */}
              <div className="card text-center relative group">
                <div className="text-2xl mb-2">📍</div>
                {editingField === 'destinationCity' ? (
                  <div className="space-y-2">
                    <input
                      type="text"
                      value={editValues.destinationCity}
                      onChange={(e) => setEditValues({...editValues, destinationCity: e.target.value})}
                      className="w-full text-center font-semibold text-gray-900 bg-transparent border-b-2 border-blue-400 focus:outline-none"
                      autoFocus
                    />
                    <div className="flex gap-2 justify-center">
                      <button 
                        onClick={() => saveField('destinationCity')}
                        className="text-xs bg-green-500 text-white px-2 py-1 rounded"
                      >
                        ✓
                      </button>
                      <button 
                        onClick={cancelEdit}
                        className="text-xs bg-gray-500 text-white px-2 py-1 rounded"
                      >
                        ✕
                      </button>
                    </div>
                  </div>
                ) : (
                  <>
                    <h4 className="font-semibold text-gray-900">{tripData?.destinationCity}</h4>
                    <button
                      onClick={() => setEditingField('destinationCity')}
                      className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity text-gray-400 hover:text-gray-600"
                    >
                      ✏️
                    </button>
                  </>
                )}
                <p className="text-sm text-gray-600">Destination</p>
              </div>

              {/* Travelers Card */}
              <div className="card text-center relative group">
                <div className="text-2xl mb-2">👥</div>
                {editingField === 'groupSize' ? (
                  <div className="space-y-2">
                    <div className="flex items-center justify-center space-x-3">
                      <button
                        onClick={() => setEditValues({...editValues, groupSize: Math.max(1, editValues.groupSize - 1)})}
                        className="w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-full flex items-center justify-center text-gray-700 font-bold"
                        disabled={editValues.groupSize <= 1}
                      >
                        -
                      </button>
                      <span className="font-semibold text-lg text-gray-900 min-w-[2rem]">
                        {editValues.groupSize}
                      </span>
                      <button
                        onClick={() => setEditValues({...editValues, groupSize: Math.min(20, editValues.groupSize + 1)})}
                        className="w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-full flex items-center justify-center text-gray-700 font-bold"
                        disabled={editValues.groupSize >= 20}
                      >
                        +
                      </button>
                    </div>
                    <div className="flex gap-2 justify-center">
                      <button 
                        onClick={() => saveField('groupSize')}
                        className="text-xs bg-green-500 text-white px-2 py-1 rounded"
                      >
                        ✓
                      </button>
                      <button 
                        onClick={cancelEdit}
                        className="text-xs bg-gray-500 text-white px-2 py-1 rounded"
                      >
                        ✕
                      </button>
                    </div>
                  </div>
                ) : (
                  <>
                    <h4 className="font-semibold text-gray-900">{tripData?.groupSize}</h4>
                    <button
                      onClick={() => setEditingField('groupSize')}
                      className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity text-gray-400 hover:text-gray-600"
                    >
                      ✏️
                    </button>
                  </>
                )}
                <p className="text-sm text-gray-600">Travelers</p>
              </div>

              {/* Start Date Card */}
              <div className="card text-center relative group">
                <div className="text-2xl mb-2">📅</div>
                {editingField === 'startDate' ? (
                  <div className="space-y-2">
                    <input
                      type="date"
                      value={editValues.startDate}
                      onChange={(e) => setEditValues({...editValues, startDate: e.target.value})}
                      className="w-full text-center font-semibold text-gray-900 bg-transparent border-b-2 border-blue-400 focus:outline-none text-sm"
                      autoFocus
                    />
                    <div className="flex gap-2 justify-center">
                      <button 
                        onClick={() => saveField('startDate')}
                        className="text-xs bg-green-500 text-white px-2 py-1 rounded"
                      >
                        ✓
                      </button>
                      <button 
                        onClick={cancelEdit}
                        className="text-xs bg-gray-500 text-white px-2 py-1 rounded"
                      >
                        ✕
                      </button>
                    </div>
                  </div>
                ) : (
                  <>
                    <h4 className="font-semibold text-gray-900">
                      {tripData?.startDate ? new Date(tripData.startDate + 'T00:00:00').toLocaleDateString('en-US', { month: 'short', day: 'numeric', timeZone: 'UTC' }) : 'TBD'}
                    </h4>
                    <button
                      onClick={() => setEditingField('startDate')}
                      className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity text-gray-400 hover:text-gray-600"
                    >
                      ✏️
                    </button>
                  </>
                )}
                <p className="text-sm text-gray-600">Start Date</p>
              </div>

              {/* Nights Card - calculated from start/end date */}
              <div className="card text-center relative group">
                <div className="text-2xl mb-2">🌙</div>
                {editingField === 'endDate' ? (
                  <div className="space-y-2">
                    <input
                      type="date"
                      value={editValues.endDate}
                      onChange={(e) => setEditValues({...editValues, endDate: e.target.value})}
                      className="w-full text-center font-semibold text-gray-900 bg-transparent border-b-2 border-blue-400 focus:outline-none text-sm"
                      autoFocus
                    />
                    <div className="flex gap-2 justify-center">
                      <button 
                        onClick={() => saveField('endDate')}
                        className="text-xs bg-green-500 text-white px-2 py-1 rounded"
                      >
                        ✓
                      </button>
                      <button 
                        onClick={cancelEdit}
                        className="text-xs bg-gray-500 text-white px-2 py-1 rounded"
                      >
                        ✕
                      </button>
                    </div>
                  </div>
                ) : (
                  <>
                    <h4 className="font-semibold text-gray-900">
                      {tripData?.startDate && tripData?.endDate 
                        ? Math.ceil((new Date(tripData.endDate + 'T00:00:00').getTime() - new Date(tripData.startDate + 'T00:00:00').getTime()) / (1000 * 3600 * 24))
                        : 'TBD'
                      }
                    </h4>
                    <button
                      onClick={() => setEditingField('endDate')}
                      className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity text-gray-400 hover:text-gray-600"
                    >
                      ✏️
                    </button>
                  </>
                )}
                <p className="text-sm text-gray-600">Nights</p>
              </div>
            </div>

            {/* Main Content Grid */}
            <div className="grid lg:grid-cols-3 gap-6">
              
              {/* Trip Details */}
              <div className="lg:col-span-1 space-y-6">
                <div className="card">
                  <h3 className="font-semibold mb-4 flex items-center">
                    <span className="text-xl mr-2">🗺️</span>
                    Trip Details
                  </h3>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-gray-600">From:</span>
                      <span className="font-medium">{tripData?.departureCity || 'Not set'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">To:</span>
                      <span className="font-medium">{tripData?.destinationCity}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Start:</span>
                      <span className="font-medium">
                        {tripData?.startDate ? new Date(tripData.startDate + 'T00:00:00').toLocaleDateString('en-US', { timeZone: 'UTC' }) : 'TBD'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">End:</span>
                      <span className="font-medium">
                        {tripData?.endDate ? new Date(tripData.endDate + 'T00:00:00').toLocaleDateString('en-US', { timeZone: 'UTC' }) : 'TBD'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Group Size:</span>
                      <span className="font-medium">{tripData?.groupSize} people</span>
                    </div>
                    {tripData?.description && (
                      <div className="pt-2 border-t">
                        <span className="text-gray-600 text-sm">Description:</span>
                        <p className="mt-1 text-sm">{tripData.description}</p>
                      </div>
                    )}
                  </div>
                </div>

              </div>

              {/* Recent Activity & Updates */}
              <div className="lg:col-span-2">
                <div className="card">
                  <h3 className="font-semibold mb-4 flex items-center">
                    <span className="text-xl mr-2">📢</span>
                    Recent Updates
                    <span className="ml-2 bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">Live</span>
                  </h3>
                  
                  <div className="space-y-4 max-h-96 overflow-y-auto">
                    {/* Sample activity items - will be replaced with real data */}
                    <div className="flex items-start space-x-3 p-3 bg-blue-50 rounded-lg border-l-4 border-blue-400">
                      <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-sm">
                        👤
                      </div>
                      <div className="flex-1">
                        <p className="text-sm">
                          <span className="font-semibold">You</span> created this trip
                        </p>
                        <p className="text-xs text-gray-500 mt-1">Just now</p>
                      </div>
                    </div>

                    {flights.length > 0 && (
                      <div className="flex items-start space-x-3 p-3 bg-green-50 rounded-lg border-l-4 border-green-400">
                        <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center text-sm">
                          ✈️
                        </div>
                        <div className="flex-1">
                          <p className="text-sm">
                            <span className="font-semibold">Flight information</span> added
                          </p>
                          <p className="text-xs text-gray-500 mt-1">{flights.length} flight{flights.length > 1 ? 's' : ''} saved</p>
                        </div>
                      </div>
                    )}

                    {itinerary.length > 0 && (
                      <div className="flex items-start space-x-3 p-3 bg-purple-50 rounded-lg border-l-4 border-purple-400">
                        <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center text-sm">
                          📅
                        </div>
                        <div className="flex-1">
                          <p className="text-sm">
                            <span className="font-semibold">Itinerary events</span> planned
                          </p>
                          <p className="text-xs text-gray-500 mt-1">{itinerary.length} event{itinerary.length > 1 ? 's' : ''} scheduled</p>
                        </div>
                      </div>
                    )}

                    {places.length > 0 && (
                      <div className="flex items-start space-x-3 p-3 bg-orange-50 rounded-lg border-l-4 border-orange-400">
                        <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center text-sm">
                          📍
                        </div>
                        <div className="flex-1">
                          <p className="text-sm">
                            <span className="font-semibold">Places of interest</span> saved
                          </p>
                          <p className="text-xs text-gray-500 mt-1">{places.length} place{places.length > 1 ? 's' : ''} bookmarked</p>
                        </div>
                      </div>
                    )}

                    {flights.length === 0 && itinerary.length === 0 && places.length === 0 && (
                      <div className="text-center py-8 text-gray-500">
                        <div className="text-4xl mb-2">🌟</div>
                        <p className="text-sm mb-2">No recent activity yet</p>
                        <p className="text-xs">Start planning your trip by adding flights, events, or places!</p>
                      </div>
                    )}
                  </div>

                  {/* Collaboration hint */}
                  <div className="mt-4 p-3 bg-gray-50 rounded-lg border-2 border-dashed border-gray-200">
                    <div className="flex items-center space-x-2">
                      <span className="text-lg">🔗</span>
                      <div className="flex-1">
                        <p className="text-sm font-medium text-gray-700">Invite collaborators</p>
                        <p className="text-xs text-gray-500">Share your trip code: <span className="font-mono font-bold text-[#FF5A5F]">{tripData?.shareCode}</span></p>
                      </div>
                      <button className="text-xs bg-blue-600 text-white px-3 py-1 rounded-full hover:bg-blue-700">
                        Share
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'flights' && (
          <div>
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold">Flights</h2>
              <button 
                onClick={() => setShowAddFlight(true)}
                className="btn-primary"
              >
                Add Flight
              </button>
            </div>
            
            {/* Add/Edit Flight Form */}
            {showAddFlight && (
              <div className="bg-gray-50 rounded-xl p-6 mb-6 border-2 border-dashed border-gray-300">
                <h3 className="font-semibold mb-4 text-lg">
                  {editingFlightId ? 'Edit Flight Details' : 'Add Flight Details'}
                </h3>
                
                {/* Flight Number - Moved to top for auto-import */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Flight Number <span className="text-blue-600">✨ Auto-imports flight details</span>
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      value={newFlight.flightNumber}
                      onChange={(e) => {
                        const value = e.target.value
                        setNewFlight({...newFlight, flightNumber: value})
                        // Auto-detect airline when user types flight number
                        if (value.length >= 3) {
                          handleFlightNumberLookup(value)
                        }
                      }}
                      placeholder="e.g. AA3421, UA123, DL456"
                      className="input-field pr-24 text-lg font-mono"
                    />
                    {parseFlightNumber(newFlight.flightNumber) && (
                      <div className="absolute right-2 top-1/2 -translate-y-1/2">
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">
                          ✓ Auto-detected
                        </span>
                      </div>
                    )}
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Enter flight number to auto-import airline and flight details
                  </p>
                </div>

                {/* Who is this flight for - Visual Cards */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Whose flight is this?
                  </label>
                  <div className="flex gap-3 flex-wrap">
                    {/* Current User Card - Always First */}
                    {tripParticipants.filter(p => p.isCurrentUser).map((participant) => {
                      const initials = (participant.name || 'U').split(' ').map((n: string) => n[0]).join('').toUpperCase().slice(0, 2)
                      const isSelected = newFlight.forWho === 'myself'
                      
                      return (
                        <button
                          key={participant.id}
                          onClick={() => setNewFlight({...newFlight, forWho: 'myself'})}
                          className={`relative transition-all ${
                            isSelected 
                              ? 'scale-105 shadow-lg' 
                              : 'hover:scale-105 hover:shadow-md'
                          }`}
                        >
                          <div className={`flex flex-col items-center p-3 rounded-xl border-2 transition-colors ${
                            isSelected
                              ? 'border-[#FF5A5F] bg-red-50'
                              : 'border-gray-200 bg-white hover:border-gray-300'
                          }`}>
                            {/* Profile Picture / Avatar */}
                            <div className={`w-16 h-16 rounded-full flex items-center justify-center text-white font-bold text-xl mb-2 ${
                              isSelected
                                ? 'bg-[#FF5A5F]'
                                : 'bg-gradient-to-br from-indigo-400 to-indigo-600'
                            }`}>
                              {initials}
                            </div>
                            {/* Name */}
                            <span className={`text-sm font-medium ${
                              isSelected ? 'text-[#FF5A5F]' : 'text-gray-700'
                            }`}>
                              Me
                            </span>
                            {userNickname && (
                              <span className="text-xs text-gray-500">({userNickname})</span>
                            )}
                            {/* Selected Indicator */}
                            {isSelected && (
                              <div className="absolute -top-1 -right-1 w-6 h-6 bg-[#FF5A5F] rounded-full flex items-center justify-center">
                                <span className="text-white text-xs">✓</span>
                              </div>
                            )}
                          </div>
                        </button>
                      )
                    })}

                    {/* Other Participants Cards */}
                    {tripParticipants.filter(p => !p.isCurrentUser).map((participant) => {
                      const initials = (participant.name || 'U').split(' ').map((n: string) => n[0]).join('').toUpperCase().slice(0, 2)
                      const isSelected = newFlight.forWho === participant.name
                      
                      // Generate consistent color for each user
                      const colors = [
                        'from-purple-400 to-purple-600',
                        'from-green-400 to-green-600',
                        'from-yellow-400 to-yellow-600',
                        'from-pink-400 to-pink-600',
                        'from-cyan-400 to-cyan-600'
                      ]
                      const colorIndex = parseInt(participant.id) % colors.length
                      const gradientColor = colors[colorIndex]
                      
                      return (
                        <button
                          key={participant.id}
                          onClick={() => setNewFlight({...newFlight, forWho: participant.name})}
                          className={`relative transition-all ${
                            isSelected 
                              ? 'scale-105 shadow-lg' 
                              : 'hover:scale-105 hover:shadow-md'
                          }`}
                        >
                          <div className={`flex flex-col items-center p-3 rounded-xl border-2 transition-colors ${
                            isSelected
                              ? 'border-[#FF5A5F] bg-red-50'
                              : 'border-gray-200 bg-white hover:border-gray-300'
                          }`}>
                            {/* Profile Picture / Avatar */}
                            <div className={`w-16 h-16 rounded-full flex items-center justify-center text-white font-bold text-xl mb-2 ${
                              isSelected
                                ? 'bg-[#FF5A5F]'
                                : `bg-gradient-to-br ${gradientColor}`
                            }`}>
                              {initials}
                            </div>
                            {/* Name */}
                            <span className={`text-sm font-medium ${
                              isSelected ? 'text-[#FF5A5F]' : 'text-gray-700'
                            }`}>
                              {participant.name}
                            </span>
                            <span className="text-xs text-gray-500">Traveler</span>
                            {/* Selected Indicator */}
                            {isSelected && (
                              <div className="absolute -top-1 -right-1 w-6 h-6 bg-[#FF5A5F] rounded-full flex items-center justify-center">
                                <span className="text-white text-xs">✓</span>
                              </div>
                            )}
                          </div>
                        </button>
                      )
                    })}

                    {/* Everyone Card */}
                    <button
                      onClick={() => setNewFlight({...newFlight, forWho: 'everyone'})}
                      className={`relative transition-all ${
                        newFlight.forWho === 'everyone' 
                          ? 'scale-105 shadow-lg' 
                          : 'hover:scale-105 hover:shadow-md'
                      }`}
                    >
                      <div className={`flex flex-col items-center p-3 rounded-xl border-2 transition-colors ${
                        newFlight.forWho === 'everyone'
                          ? 'border-[#FF5A5F] bg-red-50'
                          : 'border-gray-200 bg-white hover:border-gray-300'
                      }`}>
                        {/* Group Icon */}
                        <div className={`w-16 h-16 rounded-full flex items-center justify-center text-2xl mb-2 ${
                          newFlight.forWho === 'everyone'
                            ? 'bg-[#FF5A5F] text-white'
                            : 'bg-gradient-to-br from-blue-400 to-blue-600 text-white'
                        }`}>
                          👥
                        </div>
                        {/* Label */}
                        <span className={`text-sm font-medium ${
                          newFlight.forWho === 'everyone' ? 'text-[#FF5A5F]' : 'text-gray-700'
                        }`}>
                          Everyone
                        </span>
                        <span className="text-xs text-gray-500">Group flight</span>
                        {/* Selected Indicator */}
                        {newFlight.forWho === 'everyone' && (
                          <div className="absolute -top-1 -right-1 w-6 h-6 bg-[#FF5A5F] rounded-full flex items-center justify-center">
                            <span className="text-white text-xs">✓</span>
                          </div>
                        )}
                      </div>
                    </button>

                    {/* Add Person Card (future feature) */}
                    <button
                      disabled
                      className="opacity-50 cursor-not-allowed"
                      title="Invite more travelers to add their flights"
                    >
                      <div className="flex flex-col items-center p-3 rounded-xl border-2 border-dashed border-gray-300 bg-gray-50">
                        <div className="w-16 h-16 rounded-full flex items-center justify-center text-gray-400 text-2xl mb-2 border-2 border-dashed border-gray-300">
                          +
                        </div>
                        <span className="text-sm font-medium text-gray-400">Add Person</span>
                        <span className="text-xs text-gray-400">Coming soon</span>
                      </div>
                    </button>
                  </div>
                </div>

                {/* Flight Direction */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Flight Type
                  </label>
                  <div className="flex gap-3">
                    <button
                      onClick={() => setNewFlight({...newFlight, direction: 'arrival'})}
                      className={`px-4 py-2 rounded-lg ${
                        newFlight.direction === 'arrival' 
                          ? 'bg-blue-500 text-white' 
                          : 'bg-white border border-gray-300 text-gray-700'
                      }`}
                    >
                      ✈️ Arriving to {tripData?.destinationCity}
                    </button>
                    <button
                      onClick={() => setNewFlight({...newFlight, direction: 'departure'})}
                      className={`px-4 py-2 rounded-lg ${
                        newFlight.direction === 'departure' 
                          ? 'bg-blue-500 text-white' 
                          : 'bg-white border border-gray-300 text-gray-700'
                      }`}
                    >
                      🛫 Departing from {tripData?.destinationCity}
                    </button>
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-4 mb-4">
                  {/* Required Fields */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      {newFlight.direction === 'arrival' ? 'Arriving At' : 'Going To'} <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      value={newFlight.arrivalAirport}
                      onChange={(e) => setNewFlight({...newFlight, arrivalAirport: e.target.value})}
                      placeholder={newFlight.direction === 'arrival' ? tripData?.destinationCity : 'Enter city'}
                      className="input-field"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Arrival Time <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="datetime-local"
                      value={newFlight.arrivalTime}
                      onChange={(e) => setNewFlight({...newFlight, arrivalTime: e.target.value})}
                      className="input-field"
                      required
                    />
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-4 mb-6">
                  {/* Optional Fields */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Departing From <span className="text-gray-400">(optional)</span>
                    </label>
                    <input
                      type="text"
                      value={newFlight.departureAirport}
                      onChange={(e) => setNewFlight({...newFlight, departureAirport: e.target.value})}
                      placeholder={newFlight.direction === 'departure' ? tripData?.destinationCity : 'Enter city'}
                      className="input-field"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Departure Time <span className="text-gray-400">(optional)</span>
                    </label>
                    <input
                      type="datetime-local"
                      value={newFlight.departureTime}
                      onChange={(e) => setNewFlight({...newFlight, departureTime: e.target.value})}
                      className="input-field"
                    />
                  </div>
                </div>

                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Airline <span className="text-gray-400">(auto-filled from flight number or enter manually)</span>
                  </label>
                  <input
                    type="text"
                    value={newFlight.airline}
                    onChange={(e) => setNewFlight({...newFlight, airline: e.target.value})}
                    placeholder="e.g. United Airlines, Delta Air Lines"
                    className="input-field"
                  />
                </div>

                <div className="flex justify-end gap-3">
                  <button
                    onClick={() => {
                      setShowAddFlight(false)
                      setEditingFlightId(null)
                      setNewFlight({
                        arrivalAirport: '',
                        arrivalTime: '',
                        departureAirport: '',
                        departureTime: '',
                        airline: '',
                        flightNumber: '',
                        direction: 'arrival',
                        forWho: 'myself'
                      })
                    }}
                    className="btn-secondary"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={saveFlight}
                    disabled={!newFlight.arrivalAirport || !newFlight.arrivalTime || savingFlight}
                    className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                  >
                    {savingFlight ? (
                      <>
                        <span className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></span>
                        {editingFlightId ? 'Updating...' : 'Saving...'}
                      </>
                    ) : (
                      editingFlightId ? 'Update Flight' : 'Save Flight'
                    )}
                  </button>
                </div>
              </div>
            )}
            
            {/* Flight List - Redesigned */}
            {flights.length > 0 ? (
              <div className="space-y-3">
                {flights.map((flight) => {
                  const isExpanded = expandedFlight === flight.id
                  const isEditing = false // Editing is now done through the form
                  const arrivalAirport = JSON.parse(flight.arrivalAirport).name
                  const departureAirport = JSON.parse(flight.departureAirport).name
                  const arrivalTime = new Date(flight.arrivalTime)
                  const departureTime = flight.departureTime ? new Date(flight.departureTime) : null
                  
                  return (
                    <div key={flight.id} className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden transition-all">
                      {/* Main Flight Card - Compact View */}
                      <div className="p-4">
                        <div className="flex items-center justify-between">
                          {/* Flight Info - Left Side */}
                          <div className="flex items-center gap-3 flex-1">
                            {/* Direction Icon */}
                            <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                              flight.direction === 'arrival' 
                                ? 'bg-green-100 text-green-600' 
                                : 'bg-blue-100 text-blue-600'
                            }`}>
                              <span className="text-xl">
                                {flight.direction === 'arrival' ? '🛬' : '🛫'}
                              </span>
                            </div>
                            
                            {/* Flight Route & Time */}
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="font-semibold text-gray-900">
                                  {flight.direction === 'arrival' ? arrivalAirport : departureAirport}
                                </span>
                                <span className="text-gray-400">→</span>
                                <span className="text-gray-700">
                                  {flight.direction === 'arrival' ? departureAirport : arrivalAirport}
                                </span>
                              </div>
                              <div className="flex items-center gap-3 text-sm">
                                {flight.airline !== 'TBD' && (
                                  <span className="text-gray-600">
                                    {flight.airline} {flight.flightNumber !== 'TBD' ? flight.flightNumber : ''}
                                  </span>
                                )}
                                <span className="text-gray-500">
                                  {arrivalTime.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                                </span>
                                {flight.addedByUserName && (
                                  <span className="bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full text-xs">
                                    {flight.addedByUserName}
                                  </span>
                                )}
                              </div>
                            </div>
                          </div>

                          {/* Action Buttons - Right Side */}
                          <div className="flex items-center gap-2">
                            {/* Info/Expand Button */}
                            <button
                              onClick={() => setExpandedFlight(isExpanded ? null : flight.id)}
                              className="w-8 h-8 rounded-full bg-gray-100 hover:bg-gray-200 flex items-center justify-center text-gray-600 transition-colors"
                              title="View details"
                            >
                              <span className="text-xs font-bold">{isExpanded ? '−' : 'i'}</span>
                            </button>
                          </div>
                        </div>
                      </div>

                      {/* Expanded Details */}
                      {isExpanded && (
                        <div className="border-t border-gray-100 bg-gray-50 p-4">
                          {/* Detailed View */}
                              <div className="grid md:grid-cols-2 gap-4 mb-4">
                                <div>
                                  <h4 className="text-xs font-semibold text-gray-500 uppercase mb-2">Departure</h4>
                                  <p className="font-medium text-gray-900">{departureAirport}</p>
                                  {departureTime && (
                                    <p className="text-sm text-gray-600">
                                      {departureTime.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}
                                      {' at '}
                                      {departureTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                                    </p>
                                  )}
                                </div>
                                <div>
                                  <h4 className="text-xs font-semibold text-gray-500 uppercase mb-2">Arrival</h4>
                                  <p className="font-medium text-gray-900">{arrivalAirport}</p>
                                  <p className="text-sm text-gray-600">
                                    {arrivalTime.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}
                                    {' at '}
                                    {arrivalTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                                  </p>
                                </div>
                              </div>

                              {/* Flight Details */}
                              <div className="grid md:grid-cols-3 gap-4 mb-4">
                                <div>
                                  <h4 className="text-xs font-semibold text-gray-500 uppercase mb-1">Airline</h4>
                                  <p className="text-sm text-gray-900">{flight.airline !== 'TBD' ? flight.airline : 'Not specified'}</p>
                                </div>
                                <div>
                                  <h4 className="text-xs font-semibold text-gray-500 uppercase mb-1">Flight Number</h4>
                                  <p className="text-sm text-gray-900">{flight.flightNumber !== 'TBD' ? flight.flightNumber : 'Not specified'}</p>
                                </div>
                                <div>
                                  <h4 className="text-xs font-semibold text-gray-500 uppercase mb-1">For</h4>
                                  <p className="text-sm text-gray-900">{flight.addedByUserName || 'Everyone'}</p>
                                </div>
                              </div>

                              {/* Duration Calculation */}
                              {departureTime && (
                                <div className="mb-4">
                                  <h4 className="text-xs font-semibold text-gray-500 uppercase mb-1">Duration</h4>
                                  <p className="text-sm text-gray-900">
                                    {(() => {
                                      const diff = arrivalTime.getTime() - departureTime.getTime()
                                      const hours = Math.floor(diff / (1000 * 60 * 60))
                                      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))
                                      return `${hours}h ${minutes}m`
                                    })()}
                                  </p>
                                </div>
                              )}

                              {/* Action Buttons */}
                              <div className="flex justify-end gap-2">
                                <button
                                  onClick={() => handleEditFlight(flight)}
                                  className="px-3 py-1.5 text-sm bg-gray-200 hover:bg-gray-300 rounded-lg flex items-center gap-1 transition-colors"
                                >
                                  ✏️ Edit
                                </button>
                                <button
                                  className="px-3 py-1.5 text-sm bg-red-100 hover:bg-red-200 text-red-600 rounded-lg flex items-center gap-1 transition-colors"
                                >
                                  🗑️ Delete
                                </button>
                              </div>
                        </div>
                      )}
                    </div>
                  )
                })}
              </div>
            ) : (
              <div className="text-center py-12">
                <div className="text-4xl mb-3">✈️</div>
                <p className="text-gray-500 mb-4">No flights added yet</p>
                <button
                  onClick={() => setShowAddFlight(true)}
                  className="text-[#FF5A5F] hover:underline text-sm"
                >
                  Add your first flight
                </button>
              </div>
            )}
          </div>
        )}

        {activeTab === 'itinerary' && (
          <div className="space-y-6">
            {/* Header */}
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold">Itinerary</h2>
              <button 
                onClick={() => setShowAddEvent(true)}
                className="btn-primary"
              >
                + Add Custom Event
              </button>
            </div>

            {/* Custom Event Form */}
            {showAddEvent && (
              <div className="bg-gray-50 rounded-xl p-6 border-2 border-dashed border-gray-300">
                <h3 className="font-semibold mb-4 text-lg">Add Custom Event</h3>
                
                <div className="grid md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Event Title *
                    </label>
                    <input
                      type="text"
                      value={customEvent.title}
                      onChange={(e) => setCustomEvent({...customEvent, title: e.target.value})}
                      placeholder="e.g. Drinking Games Night"
                      className="input-field"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Category
                    </label>
                    <select
                      value={customEvent.category}
                      onChange={(e) => setCustomEvent({...customEvent, category: e.target.value})}
                      className="input-field"
                    >
                      {eventCategories.slice(1).map(cat => (
                        <option key={cat.id} value={cat.id}>{cat.label}</option>
                      ))}
                    </select>
                  </div>
                </div>
                
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Description
                  </label>
                  <textarea
                    value={customEvent.description}
                    onChange={(e) => setCustomEvent({...customEvent, description: e.target.value})}
                    placeholder="What will you be doing?"
                    rows={2}
                    className="input-field"
                  />
                </div>
                
                <div className="grid md:grid-cols-3 gap-4 mb-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Location
                    </label>
                    <input
                      type="text"
                      value={customEvent.location}
                      onChange={(e) => setCustomEvent({...customEvent, location: e.target.value})}
                      placeholder="Hotel room, Restaurant, etc."
                      className="input-field"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Date *
                    </label>
                    <input
                      type="date"
                      value={customEvent.date}
                      onChange={(e) => setCustomEvent({...customEvent, date: e.target.value})}
                      className="input-field"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Time *
                    </label>
                    <input
                      type="time"
                      value={customEvent.time}
                      onChange={(e) => setCustomEvent({...customEvent, time: e.target.value})}
                      className="input-field"
                      required
                    />
                  </div>
                </div>
                
                <div className="grid md:grid-cols-2 gap-4 mb-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Estimated Cost ($)
                    </label>
                    <input
                      type="number"
                      value={customEvent.cost}
                      onChange={(e) => setCustomEvent({...customEvent, cost: e.target.value})}
                      placeholder="0 for free events"
                      className="input-field"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Duration
                    </label>
                    <input
                      type="text"
                      value={customEvent.duration}
                      onChange={(e) => setCustomEvent({...customEvent, duration: e.target.value})}
                      placeholder="e.g. 2 hours, All day"
                      className="input-field"
                    />
                  </div>
                </div>
                
                <div className="flex justify-end gap-3">
                  <button 
                    onClick={() => setShowAddEvent(false)}
                    className="text-gray-600 hover:text-gray-800"
                  >
                    Cancel
                  </button>
                  <button 
                    onClick={() => addEventToItinerary(customEvent, true)}
                    disabled={!customEvent.title || !customEvent.date || !customEvent.time}
                    className="bg-[#FF5A5F] hover:bg-[#E04E52] disabled:bg-gray-300 text-white px-4 py-2 rounded-lg transition-colors"
                  >
                    Add to Itinerary
                  </button>
                </div>
              </div>
            )}

            {/* Event Suggestions */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-semibold">Suggested Activities</h3>
                <p className="text-sm text-gray-600">Quick add to your itinerary</p>
              </div>
              
              {/* Category Filter */}
              <div className="flex gap-2 mb-4 overflow-x-auto pb-2">
                {eventCategories.map(category => (
                  <button
                    key={category.id}
                    onClick={() => setSelectedCategory(category.id)}
                    className={`whitespace-nowrap px-4 py-2 rounded-full text-sm font-medium transition-colors ${
                      selectedCategory === category.id
                        ? 'bg-[#FF5A5F] text-white'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    <span className="mr-1">{category.icon}</span>
                    {category.label}
                  </button>
                ))}
              </div>
              
              {/* Suggestion Cards */}
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredSuggestions.map(suggestion => (
                  <div key={suggestion.id} className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-4 border">
                    <div className="flex justify-between items-start mb-3">
                      <h4 className="font-semibold text-gray-900 line-clamp-2">{suggestion.title}</h4>
                      {suggestion.requiresTicket && (
                        <span className="bg-orange-100 text-orange-800 text-xs px-2 py-1 rounded-full">
                          🎫 Ticket
                        </span>
                      )}
                    </div>
                    
                    <p className="text-gray-600 text-sm mb-3 line-clamp-2">{suggestion.description}</p>
                    
                    <div className="space-y-1 mb-4">
                      {suggestion.location && (
                        <p className="text-xs text-gray-500">📍 {suggestion.location}</p>
                      )}
                      {suggestion.duration && (
                        <p className="text-xs text-gray-500">⏱️ {suggestion.duration}</p>
                      )}
                      <div className="flex justify-between items-center">
                        <p className="text-sm font-medium">
                          {suggestion.price === 'free' 
                            ? <span className="text-green-600">Free</span>
                            : typeof suggestion.price === 'number'
                            ? <span className="text-gray-900">${suggestion.price}</span>
                            : <span className="text-gray-500">Price varies</span>
                          }
                        </p>
                        {suggestion.rating && (
                          <p className="text-xs text-yellow-600">⭐ {suggestion.rating}</p>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex gap-2">
                      <button
                        onClick={() => addEventToItinerary(suggestion)}
                        className="flex-1 bg-[#FF5A5F] hover:bg-[#E04E52] text-white text-sm py-2 px-3 rounded-lg transition-colors"
                      >
                        Quick Add
                      </button>
                      {suggestion.bookingUrl && (
                        <button
                          onClick={() => window.open(suggestion.bookingUrl, '_blank')}
                          className="bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm py-2 px-3 rounded-lg transition-colors"
                        >
                          Book
                        </button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Current Itinerary - Library Style */}
            <div>
              <div className="flex items-center gap-3 mb-6">
                <h3 className="text-xl font-semibold">Your Itinerary Library</h3>
                <div className="text-2xl">📚</div>
              </div>
              
              {itinerary.length > 0 ? (
                <div className="relative">
                  {/* Bookshelf */}
                  <div className="bg-gradient-to-r from-amber-100 to-amber-50 rounded-2xl p-6 shadow-inner">
                    {/* Books Container */}
                    <div className="flex flex-wrap gap-4 items-end justify-center min-h-[200px] relative">
                      {itinerary.map((item, index) => {
                        // Create variety in book heights, colors, and tilts
                        const heights = ['h-40', 'h-44', 'h-48', 'h-36', 'h-42']
                        const tilts = ['rotate-2', '-rotate-1', 'rotate-1', '-rotate-2', 'rotate-3', '-rotate-3']
                        const colors = [
                          'bg-gradient-to-b from-red-400 to-red-600',
                          'bg-gradient-to-b from-blue-400 to-blue-600', 
                          'bg-gradient-to-b from-green-400 to-green-600',
                          'bg-gradient-to-b from-purple-400 to-purple-600',
                          'bg-gradient-to-b from-orange-400 to-orange-600',
                          'bg-gradient-to-b from-pink-400 to-pink-600',
                          'bg-gradient-to-b from-teal-400 to-teal-600',
                          'bg-gradient-to-b from-indigo-400 to-indigo-600'
                        ]
                        
                        const height = heights[index % heights.length]
                        const tilt = tilts[index % tilts.length]
                        const color = colors[index % colors.length]
                        
                        return (
                          <div
                            key={item.id}
                            className={`relative group cursor-pointer transition-all duration-300 hover:scale-105 hover:z-10 ${tilt}`}
                            style={{ 
                              transformOrigin: 'bottom center',
                              marginBottom: Math.random() * 8 + 'px' // Random slight vertical offset
                            }}
                          >
                            {/* Book Spine */}
                            <div className={`w-16 ${height} ${color} rounded-t-lg shadow-lg relative overflow-hidden border-r border-black/20`}>
                              {/* Book Title on Spine */}
                              <div className="absolute inset-0 flex items-center justify-center">
                                <div className="transform -rotate-90 whitespace-nowrap">
                                  <p className="text-white text-xs font-bold tracking-wide truncate max-w-24">
                                    {item.title.length > 12 ? item.title.substring(0, 12) + '...' : item.title}
                                  </p>
                                </div>
                              </div>
                              
                              {/* Book Details Badge */}
                              <div className="absolute top-2 left-1/2 transform -translate-x-1/2">
                                <div className="bg-white/20 backdrop-blur-sm rounded-full w-6 h-6 flex items-center justify-center">
                                  <span className="text-white text-xs font-bold">{index + 1}</span>
                                </div>
                              </div>
                              
                              {/* Price Tag */}
                              {item.price && item.price > 0 && (
                                <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2">
                                  <div className="bg-yellow-300 text-yellow-900 text-xs px-1 py-0.5 rounded font-bold">
                                    ${item.price}
                                  </div>
                                </div>
                              )}
                            </div>
                            
                            {/* Book Details Card (appears on hover) */}
                            <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-4 opacity-0 group-hover:opacity-100 transition-all duration-300 z-20 pointer-events-none group-hover:pointer-events-auto">
                              <div className="bg-white rounded-xl shadow-2xl p-4 w-72 border border-gray-200">
                                <div className="flex justify-between items-start mb-3">
                                  <h4 className="font-bold text-gray-900 text-sm">{item.title}</h4>
                                  <div className="flex gap-1">
                                    <button className="text-gray-400 hover:text-gray-600 text-xs p-1 hover:bg-gray-100 rounded">
                                      ✏️
                                    </button>
                                    <button className="text-gray-400 hover:text-red-600 text-xs p-1 hover:bg-red-50 rounded">
                                      🗑️
                                    </button>
                                  </div>
                                </div>
                                
                                {item.description && (
                                  <p className="text-gray-600 text-xs mb-3 leading-relaxed">{item.description}</p>
                                )}
                                
                                <div className="space-y-1">
                                  <div className="flex items-center gap-2 text-xs text-gray-500">
                                    <span>📅</span>
                                    <span>{new Date(item.date).toLocaleDateString('en-US', { 
                                      weekday: 'short',
                                      month: 'short', 
                                      day: 'numeric' 
                                    })}</span>
                                    <span className="mx-1">•</span>
                                    <span>⏰</span>
                                    <span>{item.time}</span>
                                  </div>
                                  
                                  {item.location && item.location !== 'TBD' && (
                                    <div className="flex items-center gap-2 text-xs text-gray-500">
                                      <span>📍</span>
                                      <span>{item.location}</span>
                                    </div>
                                  )}
                                  
                                  <div className="flex items-center justify-between pt-2 border-t border-gray-100">
                                    <div className="flex items-center gap-2 text-xs text-gray-500">
                                      <span>👤</span>
                                      <span>{item.addedBy}</span>
                                    </div>
                                    {item.category && (
                                      <span className="bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded-full">
                                        {item.category}
                                      </span>
                                    )}
                                  </div>
                                </div>
                                
                                {/* Tooltip Arrow */}
                                <div className="absolute top-full left-1/2 transform -translate-x-1/2">
                                  <div className="border-l-8 border-r-8 border-t-8 border-transparent border-t-white"></div>
                                </div>
                              </div>
                            </div>
                          </div>
                        )
                      })}
                    </div>
                    
                    {/* Bookshelf Edge */}
                    <div className="mt-4 h-3 bg-gradient-to-r from-amber-600 to-amber-700 rounded-full shadow-lg"></div>
                  </div>
                  
                  {/* Library Stats */}
                  <div className="mt-4 flex justify-center gap-6 text-sm text-gray-600">
                    <div className="flex items-center gap-1">
                      <span className="font-medium">{itinerary.length}</span>
                      <span>events planned</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="font-medium">
                        ${itinerary.reduce((sum, item) => sum + (item.price || 0), 0)}
                      </span>
                      <span>total estimated cost</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="font-medium">
                        {new Set(itinerary.map(item => item.date)).size}
                      </span>
                      <span>days with activities</span>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-16">
                  {/* Empty Bookshelf */}
                  <div className="bg-gradient-to-r from-amber-100 to-amber-50 rounded-2xl p-12 shadow-inner mx-auto max-w-md">
                    <div className="flex items-end justify-center min-h-[120px] mb-4">
                      <div className="text-6xl text-amber-300/50">📚</div>
                    </div>
                    <div className="h-3 bg-gradient-to-r from-amber-600 to-amber-700 rounded-full shadow-lg"></div>
                  </div>
                  
                  <div className="mt-6">
                    <h3 className="text-lg font-medium text-gray-900 mb-2">Your library is empty</h3>
                    <p className="text-gray-600 mb-4">Start adding events to fill your itinerary bookshelf!</p>
                    <div className="flex justify-center gap-2 text-sm text-gray-500">
                      <span>📖</span>
                      <span>Each event becomes a book in your collection</span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'places' && (
          <div>
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold">Places</h2>
              <button className="btn-primary">Add Place</button>
            </div>
            {places.length > 0 ? (
              <div className="grid md:grid-cols-2 gap-4">
                {places.map((place) => (
                  <div key={place.id} className="card">
                    <h3 className="font-semibold">{place.name}</h3>
                    <p className="text-gray-600">{place.address}</p>
                    {place.rating && (
                      <p className="text-sm text-yellow-600">★ {place.rating}</p>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 text-center py-8">No places saved yet</p>
            )}
          </div>
        )}

        {activeTab === 'budget' && (
          <div className="space-y-6">
            {/* Total Amount Display at Top */}
            <div className="bg-gradient-to-r from-[#FF5A5F] to-[#E04E52] rounded-xl p-6 text-white text-center">
              <h2 className="text-lg font-medium mb-2">Total Trip Budget</h2>
              <div className="text-5xl font-bold mb-2">
                ${totalBudget.toFixed(0)}
              </div>
              {tripData?.groupSize > 1 && (
                <div className="text-sm opacity-90">
                  ${totalPerPerson.toFixed(0)} per person • {tripData.groupSize} travelers
                </div>
              )}
            </div>
            
            {/* Mode Toggle */}
            <div className="flex justify-between items-center">
              <h3 className="text-xl font-semibold">Budget Categories</h3>
              <div className="flex bg-gray-100 rounded-lg p-1">
                <button
                  onClick={() => setGlobalBudgetMode('pot')}
                  className={`px-4 py-1.5 rounded-md text-sm font-medium transition-all ${
                    globalBudgetMode === 'pot'
                      ? 'bg-white text-gray-900 shadow-sm'
                      : 'text-gray-600'
                  }`}
                >
                  Total
                </button>
                <button
                  onClick={() => setGlobalBudgetMode('per_person')}
                  className={`px-4 py-1.5 rounded-md text-sm font-medium transition-all ${
                    globalBudgetMode === 'per_person'
                      ? 'bg-white text-gray-900 shadow-sm'
                      : 'text-gray-600'
                  }`}
                >
                  Per Person
                </button>
              </div>
            </div>

            {/* Table of Category Cards */}
            <div className="grid md:grid-cols-3 lg:grid-cols-5 gap-4">
              {budgets.map((budget, index) => {
                const colors = [
                  'from-red-500 to-red-600',
                  'from-green-500 to-green-600', 
                  'from-blue-500 to-blue-600',
                  'from-orange-500 to-orange-600',
                  'from-purple-500 to-purple-600',
                  'from-cyan-500 to-cyan-600',
                  'from-pink-500 to-pink-600',
                  'from-indigo-500 to-indigo-600'
                ]
                
                return (
                  <div key={budget.id} className="bg-white rounded-xl shadow-md hover:shadow-lg transition-all">
                    {/* Card Header with Icon */}
                    <div className={`bg-gradient-to-br ${colors[index % colors.length]} rounded-t-xl p-4 text-white text-center`}>
                      <div className="text-3xl mb-1">
                        {getBudgetIcon(budget.category)}
                      </div>
                      <div className="text-sm font-medium capitalize">
                        {budget.category}
                      </div>
                    </div>
                    
                    {/* Card Body with Amount */}
                    <div className="p-4">
                      {editingBudget === budget.id ? (
                        <div className="space-y-3">
                          <input
                            type="number"
                            value={editingAmount}
                            onChange={(e) => setEditingAmount(e.target.value)}
                            className="w-full px-3 py-2 border-2 border-gray-300 rounded-lg text-center text-lg font-bold focus:outline-none focus:border-[#FF5A5F]"
                            placeholder="0"
                            autoFocus
                          />
                          <div className="text-xs text-gray-500 text-center">
                            {globalBudgetMode === 'pot' 
                              ? `Enter total for ${budget.category}`
                              : `Enter per person for ${budget.category}`
                            }
                          </div>
                          <div className="grid grid-cols-2 gap-2">
                            <button
                              onClick={() => {
                                const amount = parseFloat(editingAmount) || 0
                                updateBudgetAmount(budget.id, amount, globalBudgetMode)
                                setEditingBudget(null)
                                setEditingAmount('')
                              }}
                              className="bg-green-500 hover:bg-green-600 text-white py-1 px-3 rounded-lg text-sm font-medium"
                            >
                              Save
                            </button>
                            <button
                              onClick={() => {
                                setEditingBudget(null)
                                setEditingAmount('')
                              }}
                              className="bg-gray-300 hover:bg-gray-400 text-gray-700 py-1 px-3 rounded-lg text-sm font-medium"
                            >
                              Cancel
                            </button>
                          </div>
                        </div>
                      ) : (
                        <button
                          onClick={() => {
                            setEditingBudget(budget.id)
                            setEditingAmount(globalBudgetMode === 'pot' ? budget.totalAmount.toString() : budget.perPersonAmount.toString())
                          }}
                          className="w-full hover:bg-gray-50 rounded-lg py-2 transition-colors"
                        >
                          <div className="text-3xl font-bold text-gray-900">
                            ${budget.totalAmount.toFixed(0)}
                          </div>
                          {tripData?.groupSize > 1 && (
                            <div className="text-xs text-gray-500 mt-1">
                              ${budget.perPersonAmount.toFixed(0)} each
                            </div>
                          )}
                          <div className="text-xs text-blue-600 mt-2">
                            Click to edit
                          </div>
                        </button>
                      )}
                    </div>
                    
                    {/* Delete button for custom categories */}
                    {budget.isCustomCategory && (
                      <div className="border-t px-4 py-2">
                        <button
                          onClick={() => deleteBudgetCategory(budget.id)}
                          className="text-red-500 hover:text-red-700 text-xs w-full"
                        >
                          Remove
                        </button>
                      </div>
                    )}
                  </div>
                )
              })}

              {/* Add New Category Card */
              <div className="bg-white rounded-xl shadow-md hover:shadow-lg transition-all border-2 border-dashed border-gray-300">
                <div className="p-4">
                  {showAddBudgetCategory ? (
                    <div className="space-y-3">
                      <input
                        type="text"
                        value={newCategoryName}
                        onChange={(e) => setNewCategoryName(e.target.value)}
                        placeholder="Category name"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:border-[#FF5A5F]"
                        autoFocus
                        onKeyPress={(e) => e.key === 'Enter' && addCustomBudgetCategory()}
                      />
                      <div className="grid grid-cols-2 gap-2">
                        <button
                          onClick={addCustomBudgetCategory}
                          disabled={!newCategoryName.trim()}
                          className="bg-[#FF5A5F] hover:bg-[#E04E52] disabled:bg-gray-300 text-white py-1 px-3 rounded-lg text-sm"
                        >
                          Add
                        </button>
                        <button
                          onClick={() => {
                            setShowAddBudgetCategory(false)
                            setNewCategoryName('')
                          }}
                          className="bg-gray-300 hover:bg-gray-400 text-gray-700 py-1 px-3 rounded-lg text-sm"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  ) : (
                    <button
                      onClick={() => setShowAddBudgetCategory(true)}
                      className="w-full py-8 text-gray-400 hover:text-gray-600 transition-colors"
                    >
                      <div className="text-3xl mb-2">+</div>
                      <div className="text-sm">Add Category</div>
                    </button>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Floating Action Button for Quick Actions */}
      <div className="fixed bottom-6 right-6 z-50">
        {/* Quick Actions Popup */}
        {showQuickActions && (
          <div className="absolute bottom-16 right-0 mb-2">
            <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-2 min-w-[200px]">
              <div className="space-y-1">
                <button
                  onClick={() => {
                    setActiveTab('flights')
                    setShowQuickActions(false)
                  }}
                  className="w-full text-left px-4 py-3 rounded-lg hover:bg-gray-50 flex items-center space-x-3 transition-colors"
                >
                  <span className="text-lg">✈️</span>
                  <span className="text-sm font-medium">Add Flight</span>
                </button>
                <button
                  onClick={() => {
                    setActiveTab('itinerary')
                    setShowQuickActions(false)
                  }}
                  className="w-full text-left px-4 py-3 rounded-lg hover:bg-gray-50 flex items-center space-x-3 transition-colors"
                >
                  <span className="text-lg">📅</span>
                  <span className="text-sm font-medium">Add Event</span>
                </button>
                <button
                  onClick={() => {
                    setActiveTab('places')
                    setShowQuickActions(false)
                  }}
                  className="w-full text-left px-4 py-3 rounded-lg hover:bg-gray-50 flex items-center space-x-3 transition-colors"
                >
                  <span className="text-lg">📍</span>
                  <span className="text-sm font-medium">Add Places</span>
                </button>
                <button
                  onClick={() => {
                    setActiveTab('budget')
                    setShowQuickActions(false)
                  }}
                  className="w-full text-left px-4 py-3 rounded-lg hover:bg-gray-50 flex items-center space-x-3 transition-colors"
                >
                  <span className="text-lg">💰</span>
                  <span className="text-sm font-medium">Budget</span>
                </button>
              </div>
            </div>
          </div>
        )}

        {/* FAB Button */}
        <button
          onClick={() => setShowQuickActions(!showQuickActions)}
          className={`w-14 h-14 bg-[#FF5A5F] hover:bg-[#E04E52] text-white rounded-full shadow-lg flex items-center justify-center transition-all duration-200 ${
            showQuickActions ? 'rotate-45' : ''
          }`}
        >
          <span className="text-xl">+</span>
        </button>
      </div>

      {/* Backdrop to close popup */}
      {showQuickActions && (
        <div
          className="fixed inset-0 z-40"
          onClick={() => setShowQuickActions(false)}
        />
      )}
    </div>
  )
}